#include <stdio.h>
#include <string.h>

// Function to get grade based on marks
char getGrade(int marks) {
    if (marks >= 71 && marks <= 100) return 'A';
    else if (marks >= 61 && marks <= 70) return 'B';
    else if (marks >= 51 && marks <= 60) return 'C';
    else if (marks >= 40 && marks <= 50) return 'D';
    else return 'E'; // Fail
}

int main() {
    // University Header
    printf("\n==============================================\n");
    printf("     JOMO KENYATTA UNIVERSITY \n");
    printf("              OF \n");
    printf("  AGRICULTURE AND TECHNOLOGY\n");
    printf("==============================================\n\n");

    // 1. Capturing Student Details
    char name[50], reg_no[20], year[10];
    printf("===== ENTER STUDENT DETAILS =====\n");
    printf("Enter Student Name: ");
    fgets(name, sizeof(name), stdin);
    name[strcspn(name, "\n")] = 0; // Remove newline character

    printf("Enter Registration Number: ");
    fgets(reg_no, sizeof(reg_no), stdin);
    reg_no[strcspn(reg_no, "\n")] = 0;

    printf("Enter Year of Study: ");
    fgets(year, sizeof(year), stdin);
    year[strcspn(year, "\n")] = 0;

    // 2. Capturing Unit Details and Marks
    char unit_code[7][10], unit_name[7][50];
    int marks[7], i, total = 0, bestIndex = 0, worstIndex = 0;

    printf("\n===== ENTER UNIT DETAILS =====\n");
    for (i = 0; i < 7; i++) {
        printf("\nUnit %d Code: ", i + 1);
        scanf("%s", unit_code[i]);

        printf("Unit %d Name: ", i + 1);
        getchar(); // Consume newline left by previous input
        fgets(unit_name[i], sizeof(unit_name[i]), stdin);
        unit_name[i][strcspn(unit_name[i], "\n")] = 0;

        printf("Marks for %s (%s): ", unit_name[i], unit_code[i]);
        scanf("%d", &marks[i]);

        total += marks[i];

        // Identify best and worst-performing units
        if (marks[i] > marks[bestIndex]) bestIndex = i;
        if (marks[i] < marks[worstIndex]) worstIndex = i;
    }

    // 3. Calculate Average Marks
    float average = total / 7.0;

    // 4. Assign Grade Based on Average
    char avg_grade = getGrade((int)average);

    // 5. Display the Result Slip
    printf("\n================ JKUAT RESULT SLIP ================\n");
    printf("Student Name: %s\n", name);
    printf("Registration Number: %s\n", reg_no);
    printf("Year of Study: %s\n", year);
    printf("--------------------------------------------------\n");
    printf("Unit Code | Unit Name                | Marks | Grade\n");
    printf("--------------------------------------------------\n");

    for (i = 0; i < 7; i++) {
        printf("%-9s | %-25s | %3d   |  %c\n", unit_code[i], unit_name[i], marks[i], getGrade(marks[i]));
    }

    printf("--------------------------------------------------\n");
    printf("Average Marks: %.2f (Grade: %c)\n", average, avg_grade);
    printf("Best Performing Unit: %s (%s) - %d Marks\n", unit_name[bestIndex], unit_code[bestIndex], marks[bestIndex]);
    printf("Lowest Performing Unit: %s (%s) - %d Marks\n", unit_name[worstIndex], unit_code[worstIndex], marks[worstIndex]);
    printf("==================================================\n");

    return 0;
}